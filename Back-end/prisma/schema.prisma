generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model category {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(45)
  product product[]
}

model platform {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(45)
  account account[]
}

model purchase {
  id              Int             @default(autoincrement())
  client_id       Int
  salesperson_id  Int
  payment_type_id Int
  date            DateTime        @db.Date
  status          String          @db.VarChar(45)
  prod_purchase   prod_purchase[]
  client          client          @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_clients1")
  payment_type    payment_type    @relation(fields: [payment_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_payment_type1")
  salesperson     salesperson     @relation(fields: [salesperson_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_salesperson1")

  @@id([id, client_id, salesperson_id, payment_type_id])
  @@index([client_id], map: "fk_purchase_clients1_idx")
  @@index([salesperson_id], map: "fk_purchase_salesperson1_idx")
  @@index([payment_type_id], map: "fk_purchase_payment_type1_idx")
}

model request {
  id                 Int             @unique @default(autoincrement())
  account_id         Int
  status_tracking_id Int
  date               DateTime        @db.Date
  store_name         String          @db.VarChar(45)
  tracking_id        String          @db.VarChar(45)
  prod_request       prod_request[]
  account            account         @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_account1")
  status_tracking    status_tracking @relation(fields: [status_tracking_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_status_tracking1")

  @@id([id, account_id, status_tracking_id])
  @@index([account_id], map: "fk_request_account1_idx")
  @@index([status_tracking_id], map: "fk_request_status_tracking1_idx")
}

model salesperson {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(45)
  cpf      String?    @db.VarChar(45)
  purchase purchase[]
}

model product {
  id             Int             @unique @default(autoincrement())
  category_id    Int
  name           String          @db.VarChar(45)
  quantity       Int
  sale_price     Float           @db.Float
  profit_porcent Int
  description    String?         @db.VarChar(200)
  prod_purchase  prod_purchase[]
  prod_request   prod_request[]
  category       category        @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_produto_category1")

  @@id([id, category_id])
  @@index([category_id], map: "fk_produto_category1_idx")
}

model account {
  id          Int       @unique(map: "id_UNIQUE") @default(autoincrement())
  platform_id Int
  name        String    @db.VarChar(45)
  owner       String    @db.VarChar(45)
  platform    platform  @relation(fields: [platform_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_platform1")
  request     request[]

  @@id([id, platform_id])
  @@index([platform_id], map: "fk_account_platform1_idx")
}

model client {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(45)
  cpf         String?    @db.VarChar(45)
  adress      String?    @db.VarChar(45)
  place_work  String?    @db.VarChar(45)
  description String?    @db.VarChar(100)
  purchase    purchase[]
}

model payment_type {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(45)
  porcent_rate Float      @db.Float
  purchase     purchase[]
}

model prod_purchase {
  purchase_id              Int
  purchase_clients_id      Int
  purchase_salesperson_id  Int
  purchase_payment_type_id Int
  product_id               Int
  product_category_id      Int
  quantity                 Int
  total_profit             Float    @db.Float
  product                  product  @relation(fields: [product_id, product_category_id], references: [id, category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_has_product_product1")
  purchase                 purchase @relation(fields: [purchase_id, purchase_clients_id, purchase_salesperson_id, purchase_payment_type_id], references: [id, client_id, salesperson_id, payment_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_has_product_purchase1")

  @@id([purchase_id, purchase_clients_id, purchase_salesperson_id, purchase_payment_type_id, product_id, product_category_id])
  @@index([product_id, product_category_id], map: "fk_purchase_has_product_product1_idx")
  @@index([purchase_id, purchase_clients_id, purchase_salesperson_id, purchase_payment_type_id], map: "fk_purchase_has_product_purchase1_idx")
}

model prod_request {
  request_id     Int
  product_id     Int
  quantity       Int
  purchase_price Float   @db.Float
  product        product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_has_product_product2")
  request        request @relation(fields: [request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_has_product_request2")

  @@id([request_id, product_id])
  @@index([product_id], map: "fk_request_has_product_product2_idx")
  @@index([request_id], map: "fk_request_has_product_request2_idx")
}

model status_tracking {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(45)
  request request[]
}