generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  id          Int       @default(autoincrement())
  name        String    @db.VarChar(45)
  platform_id Int
  owner       String    @db.VarChar(45)
  platform    platform  @relation(fields: [platform_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accounts_platform1")
  request     request[]

  @@id([id, platform_id])
  @@index([platform_id], map: "fk_accounts_platform1_idx")
}

model category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(45)
}

model clients {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(45)
  cpf       String?    @db.VarChar(45)
  adress    String?    @db.VarChar(45)
  placeWork String?    @db.VarChar(45)
  purchase  purchase[]
}

model paymentType {
  id                        Int    @default(autoincrement())
  type                      String @db.VarChar(45)
  installments              Int?
  rate_id                   Int
  rate_payment_processor_id Int

  @@id([id, rate_id, rate_payment_processor_id])
  @@index([rate_id], map: "fk_paymentType_rate1_idx")
}

model platform {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(45)
  accounts accounts[]
}

model prodPurchase {
  purchase_id   Int
  produto_id    Int
  quantity      Int
  salePrice     Int
  porcentProfit Int
  purchase      purchase @relation(fields: [purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_has_produto_purchase1")

  @@id([purchase_id, produto_id])
  @@index([produto_id], map: "fk_purchase_has_produto_produto1_idx")
  @@index([purchase_id], map: "fk_purchase_has_produto_purchase1_idx")
}

model prodRequest {
  produto_id    Int
  request_id    Int
  purchasePrice Int
  quantity      Int
  totalPrice    Int
  request       request @relation(fields: [request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_produto_has_request_request1")

  @@id([produto_id, request_id])
  @@index([produto_id], map: "fk_produto_has_request_produto_idx")
  @@index([request_id], map: "fk_produto_has_request_request1_idx")
}

model purchase {
  id                                    Int            @unique @default(autoincrement())
  totalPrice                            Int
  clientName                            Int
  clients_id                            Int
  paymentType_id                        Int
  paymentType_rate_id                   Int
  paymentType_rate_payment_processor_id Int            @map("paymentType_rate_payment processor_id")
  salesperson_id                        Int
  prodPurchase                          prodPurchase[]
  clients                               clients        @relation(fields: [clients_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_clients1")
  salesperson                           salesperson    @relation(fields: [salesperson_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_salesperson1")

  @@id([id, clients_id, paymentType_id, paymentType_rate_id, paymentType_rate_payment_processor_id, salesperson_id])
  @@index([clients_id], map: "fk_purchase_clients1_idx")
  @@index([paymentType_id, paymentType_rate_id, paymentType_rate_payment_processor_id], map: "fk_purchase_paymentType1_idx")
  @@index([salesperson_id], map: "fk_purchase_salesperson1_idx")
}

model rate {
  id                   Int @default(autoincrement())
  porcent              Int
  installments         Int
  payment_processor_id Int

  @@id([id, payment_processor_id])
}

model request {
  id                   Int           @unique @default(autoincrement())
  date                 DateTime      @db.Date
  idTracking           String        @db.VarChar(45)
  qtd_items            Int
  statusTracking       String        @db.VarChar(15)
  accounts_id          Int
  accounts_platform_id Int
  lote                 String        @db.VarChar(45)
  storeName            String        @db.VarChar(45)
  prodRequest          prodRequest[]
  accounts             accounts      @relation(fields: [accounts_id, accounts_platform_id], references: [id, platform_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_request_accounts1")

  @@id([id, accounts_id, accounts_platform_id])
  @@index([accounts_id, accounts_platform_id], map: "fk_request_accounts1_idx")
}

model salesperson {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(45)
  cpf      String     @db.VarChar(45)
  purchase purchase[]
}

model paymentProcessor {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(45)
}

model product {
  id          Int     @unique(map: "produto_id_key") @default(autoincrement())
  name        String  @db.VarChar(45)
  quantity    Int
  inTransit   Int
  category_id Int
  description String? @db.VarChar(200)

  @@id([id, category_id])
  @@index([category_id], map: "fk_produto_category1_idx")
}
